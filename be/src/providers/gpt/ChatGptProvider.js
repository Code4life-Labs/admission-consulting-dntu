import OpenAI from 'openai'
import { env } from '~/config/environment'

const openai = new OpenAI({
  apiKey: env.CHATGPT_API_KEY
})

const textGeneration = async (queryText) => {
  console.log('üöÄ ~ file: ChatGptProvider.js:5 ~ textGeneration ~ queryText:', queryText)
  try {

    // c√°i n√†y s·∫Ω t·ªën tg nhi·ªÅu h∆°n model
    // const response = await openai.chat.completions.create({
    //   model: 'gpt-3.5-turbo',
    //   messages: [
    //     {
    //       role: 'system',
    //       content: 'Nh∆∞ l√† m·ªôt ng∆∞·ªùi tr·ª£ l√Ω t·∫°o vƒÉn b·∫£n cho chatbot h·ªó tr·ª£ d·ªãch thu·∫≠t t√¥i c√≥ hai bi·∫øn textInitial v√† textTranslated t√¥i mu·ªën b·∫°n h√£y gi√∫p t·∫°o ra ƒëo·∫°n vƒÉn b·∫£n ƒë·ªÉ tr·∫£ v·ªÅ cho ng∆∞·ªùi d√πng'
    //     },
    //     {
    //       role: 'user',
    //       content: 'textInitial="Hello", textTranslated="Xin Ch√†o"'
    //     },
    //     {
    //       role: 'system',
    //       content: 'T·ª´ Ti·∫øng Anh "Hello" c√≥ nghƒ©a l√† "Xin ch√†o" trong Ti·∫øng Vi·ªát'
    //     },
    //     {
    //       role: 'user',
    //       content: queryText
    //     }
    //   ],
    //   temperature: 0.2,
    //   max_tokens: 1500,
    //   top_p: 1,
    //   frequency_penalty: 0,
    //   presence_penalty: 0
    // })

    const response = await openai.completions.create({
      model: 'text-davinci-003',
      prompt: `Human: textInitial="Hello", textTranslated="Xin Ch√†o" \nChatbot: T·ª´ Ti·∫øng Anh "Hello" c√≥ nghƒ©a l√† "Xin ch√†o" trong Ti·∫øng Vi·ªát \nHuman: ${queryText} \nChatbot: `,
      temperature: 0.1,
      max_tokens: 3500,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0.6,
      stop: ['Human:', 'AI:']
    })
    console.log('üöÄ ~ file: ChatGptProvider.js:49 ~ textGeneration ~ response:', response)

    return {
      isSuccess: true,
      response: `${response.choices[0].text}`.trimStart()
    }

  } catch (error) {
    console.log('üöÄ ~ file: ChatGptProvider.js:45 ~ textGeneration ~ error:', error)
    return {
      isSuccess: false,
      response: 'C√≥ l·ªói trong qu√° tr√¨nh g·ªçi ƒë·∫øn chatgpt'
    }
  }
}

const translateText = async (queryText) => {
  try {
    const response = await openai.completions.create({
      model: 'text-davinci-003',
      prompt: `Human: text="Hello",languageConvert="vietnamese" \nChatbot: "Xin ch√†o" \nHuman: text="Nh·ªØng con ch√≥",languageConvert="english" \nChatbot: "Dogs" trong Ti·∫øng Vi·ªát \nHuman: ${queryText} \nChatbot: `,
      temperature: 0.1,
      max_tokens: 3500,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0.6,
      stop: ['Human:', 'AI:']
    })
    console.log('üöÄ ~ file: ChatGptProvider.js:49 ~ textGeneration ~ response:', response)

    return {
      isSuccess: true,
      response: `${response.choices[0].text}`.trimStart()
    }

  } catch (error) {
    console.log('üöÄ ~ file: ChatGptProvider.js:45 ~ textGeneration ~ error:', error)
    return {
      isSuccess: false,
      response: 'Xin l·ªói ƒë√£ c√≥ v·∫•n trong qu√° tr√¨nh g·ªçi ƒë·∫øn server!'
    }
  }
}

export const ChatGptProvider = {
  textGeneration,
  translateText
}